Index: game.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//TODO Leg til en fiende\r\nclass GridSystem { //TODO fortsette\r\n    //TODO kommentere - Kristoffer\r\n    constructor(matrix, pacmanX, pacmanY, blinkyX, blinkyY) { //Lager mange lag som ligger oppå hverandre for å vise siden og definerer disse.\r\n        this.matrix = matrix;\r\n        this.uiContext = this.#makeCanvas(850, 850, \"#000\");\r\n        this.outlineContext = this.#makeCanvas(0, 0, \"#000\");\r\n        this.coinContext = this.#makeCanvas(0, 0, \"#000\", true);\r\n        this.topContext = this.#makeCanvas(0, 0, \"#000\", true);\r\n        //maze størelse\r\n        this.cellSize = 24;\r\n        this.padding = 1;\r\n        //Pacman\r\n        this.pacman = {x: pacmanX, y: pacmanY, color: \"orange\"}\r\n        this.matrix [pacmanY][pacmanX] = 3;\r\n        this.rotation = 0;\r\n\r\n        //Blinky\r\n        this.blinky = {x: blinkyX, y: blinkyY, color: \"red\"};\r\n        this.matrix [blinkyY][blinkyX] = 5;\r\n        this.rotationB = 0;\r\n        this.bTile = 0;\r\n\r\n        //game variabler\r\n        this.FPS = 5;\r\n        this.play = false;\r\n        this.lost = false;\r\n        this.dotCount = null; //Setter dotCount til NULL istede for 0, fordi dotCount === 0 vil slutte av programmet lengre nede\r\n\r\n        document.addEventListener(\"keydown\", this.#rotatePacman) //Koden hører alltid etter et innput fra tasturet til brukeren\r\n    }\r\n\r\n    /*#fps() {\r\n        if (this.timer === this.speed) {\r\n            this.timer = 0;\r\n            return true;\r\n        }\r\n        this.timer++\r\n        return false;\r\n    }*/\r\n\r\n    uiUpdate() { //Oppdaterer UI laget der score og tid er vist\r\n        this.uiContext.clearRect(0,0,900,900) //Sletter vekk alt på laget, slik at ny up-to-date kan bli plassert under.\r\n        this.uiContext.fillText(\"Score: \" + score, 20, 30); //Skriver opp igjen Score\r\n\r\n    }\r\n\r\n    #isValidMove(x, y) {\r\n        if (this.matrix[this.pacman.y + y][this.pacman.x + x] === 0) {\r\n            return true;\r\n        }\r\n        else if (this.matrix[this.pacman.y + y][this.pacman.x + x] === 4) {\r\n            score = score + 10;\r\n            //time++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    #updateMatrix(y, x, val) {\r\n        this.matrix[y][x] = val;\r\n    }\r\n\r\n    #rotatePacman = ({keyCode}) =>{\r\n        this.play = true;\r\n\r\n        if (keyCode === 65) { // venstre\r\n            this.rotation = 0;\r\n            console.log(\"a pressed\");\r\n        }\r\n        else if (keyCode === 68) { // høyre\r\n            this.rotation = 180;\r\n            console.log(\"d pressed\");\r\n        }\r\n        else if (keyCode === 87) { // opp\r\n            this.rotation = 90;\r\n            console.log(\"w pressed\");\r\n        }\r\n        else if (keyCode === 83) { // ned\r\n            this.rotation = 270;\r\n            console.log(\"s pressed\");\r\n        }\r\n    }\r\n\r\n    isValidBlinky(x, y) {\r\n        if (this.matrix[this.blinky.y + y][this.blinky.x + x] === 0) {\r\n            return true;\r\n        }\r\n        else if (this.matrix[this.blinky.y + y][this.blinky.x + x] === 4) {\r\n            return true;\r\n        }\r\n        else if (this.matrix[this.blinky.y + y][this.blinky.x + x] === 3) {\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    makeValueBlinky(x, y) {\r\n        this.bPosX = this.blinky.x + x - this.pacman.x;\r\n        this.bPosY = this.blinky.y + y - this.pacman.y;\r\n    }\r\n\r\n    findDirB() {\r\n        this.svar1 = 100;\r\n        this.svar2 = 100;\r\n        this.svar3 = 100;\r\n        if (this.rotationB === 90) {//Opp\r\n            if (this.isValidBlinky(0, -1)) { // Sjekker Opp\r\n                this.makeValueBlinky(0, -1);\r\n                this.svar1 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n\r\n            if (this.isValidBlinky(1, 0)) { // Sjekker høyre\r\n                this.makeValueBlinky(1, 0);\r\n                this.svar2 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n\r\n            if (this.isValidBlinky(-1, 0)) { // Sjekker venstre\r\n                this.makeValueBlinky(-1, 0);\r\n                this.svar3 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n\r\n            this.value = {svar1: this.svar1, svar2: this.svar2, svar3: this.svar3}, this.min = Infinity, this.key;\r\n            for (let i in this.value) {\r\n                if (this.value[i] < this.min) {\r\n                    this.min = this.value[i]\r\n                    this.key = i;\r\n                }\r\n            }\r\n            //console.log(\"Opp\"+this.key);\r\n            if (this.key === \"svar1\") { // opp\r\n                this.rotationB = 90\r\n            }\r\n            else if (this.key === \"svar2\") { // Høyre\r\n                this.rotationB = 180\r\n            }\r\n            else if (this.key === \"svar3\") { // Venstre\r\n                this.rotationB = 0\r\n            }\r\n            if (this.svar1 === 100 && this.svar2 === 100) {\r\n                if (this.svar1 === 100 && this.svar3 === 100){\r\n                    this.rotationB = 90\r\n                }\r\n            }\r\n        }\r\n        else if(this.rotationB === 180) {//høyre\r\n            if (this.isValidBlinky(0, -1)) { // Sjekker Opp\r\n                this.makeValueBlinky(0, -1);\r\n                this.svar1 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(1, 0)) { //Sjekker høyre\r\n                this.makeValueBlinky(1, 0);\r\n                this.svar2 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(0, 1)) {  //Sjekker ned\r\n                this.makeValueBlinky(0, 1);\r\n                this.svar3 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            this.value = {svar1: this.svar1, svar2: this.svar2, svar3: this.svar3}, this.min = Infinity, this.key;\r\n            for (let i in this.value) {\r\n                if (this.value[i] < this.min) {\r\n                    this.min = this.value[i]\r\n                    this.key = i;\r\n                }\r\n            }\r\n            //console.log(\"Høyre \"+this.key);\r\n            if (this.key === \"svar1\") {\r\n                this.rotationB = 90\r\n            }\r\n            else if (this.key === \"svar2\") {\r\n                this.rotationB = 180\r\n            }\r\n            else if (this.key === \"svar3\") {\r\n                this.rotationB = 270\r\n            }\r\n            if (this.svar1 === 100 && this.svar2 === 100) {\r\n                if (this.svar1 === 100 && this.svar3 === 100){\r\n                    this.rotationB = 180\r\n                }\r\n            }\r\n        }\r\n        else if (this.rotationB === 270) {//ned\r\n            if (this.isValidBlinky(1, 0)) {\r\n                this.makeValueBlinky(1, 0); //Sjekker høyre\r\n                this.svar1 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(0, 1)) {  //Sjekker ned\r\n                this.makeValueBlinky(0, 1);\r\n                this.svar2 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(-1, 0)) { // Sjekker venstre\r\n                this.makeValueBlinky(-1, 0);\r\n                this.svar3 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            this.value = {svar1: this.svar1, svar2: this.svar2, svar3: this.svar3}, this.min = Infinity, this.key;\r\n            for (let i in this.value) {\r\n                if (this.value[i] < this.min) {\r\n                    this.min = this.value[i]\r\n                    this.key = i;\r\n                }\r\n            }\r\n            //console.log(\"Ned\" +this.key);\r\n            if (this.key === \"svar1\") {\r\n                this.rotationB = 180\r\n            }\r\n            else if (this.key === \"svar2\") {\r\n                this.rotationB = 270\r\n            }\r\n            else if (this.key === \"svar3\") {\r\n                this.rotationB = 0\r\n            }\r\n            if (this.svar1 === 100 && this.svar2 === 100) {\r\n                if (this.svar1 === 100 && this.svar3 === 100){\r\n                    this.rotationB = 270\r\n                }\r\n            }\r\n        }\r\n        else if (this.rotationB === 0) {//venstre\r\n            if (this.isValidBlinky(0, -1)) { // Sjekker Opp\r\n                this.makeValueBlinky(0, -1);\r\n                this.svar1 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(0, 1)) {  //Sjekker ned\r\n                this.makeValueBlinky(0, 1);\r\n                this.svar2 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            if (this.isValidBlinky(-1, 0)) { // Sjekker venstre\r\n                this.makeValueBlinky(-1, 0);\r\n                this.svar3 = Math.sqrt(this.bPosX * this.bPosX + this.bPosY * this.bPosY);\r\n            }\r\n            this.value = {svar1: this.svar1, svar2: this.svar2, svar3: this.svar3}, this.min = Infinity, this.key;\r\n            for (let i in this.value) {\r\n                if (this.value[i] < this.min) {\r\n                    this.min = this.value[i]\r\n                    this.key = i;\r\n                }\r\n            }\r\n            //console.log(\"Venstre \"+this.key);\r\n            if (this.key === \"svar1\") {\r\n                this.rotationB = 90\r\n            }\r\n            else if (this.key === \"svar2\") {\r\n                this.rotationB = 270\r\n            }\r\n            else if (this.key === \"svar3\") {\r\n                this.rotationB = 0\r\n            }\r\n            if (this.svar1 === 100 && this.svar2 === 100) {\r\n                if (this.svar1 === 100 && this.svar3 === 100){\r\n                    this.rotationB = 0\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*findDir() {\r\n        this.value = this.findLogic(), this.min = Infinity, this.key;\r\n        for (let i in this.value) {\r\n            if (this.value[i] < this.min) {\r\n                this.min = this.value[i]\r\n                this.key = i;\r\n            }\r\n        }\r\n        console.log(this.key)\r\n    }*/\r\n\r\n    moveBlinky() {\r\n        this.findDirB()\r\n        if (this.rotationB === 0) { // Venstre\r\n            //console.log(\"Venstre\")\r\n            if (this.isValidBlinky(-1, 0)) {\r\n\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x, this.bTile);\r\n                this.bTile = this.matrix[this.blinky.y][this.blinky.x - 1];\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x - 1, 5);\r\n                this.blinky.x--;\r\n\r\n            }\r\n\r\n        }\r\n        if (this.rotationB === 180) { // Høyre\r\n            //console.log(\"Høyre\")\r\n            if (this.isValidBlinky(1, 0)) {\r\n\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x, this.bTile)\r\n                this.bTile = this.matrix[this.blinky.y][this.blinky.x + 1]\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x + 1, 5)\r\n                this.blinky.x++;\r\n\r\n            }\r\n\r\n        }\r\n        if (this.rotationB === 90) { // Opp\r\n            //console.log(\"Opp\")\r\n            if (this.isValidBlinky(0, -1)) {\r\n\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x, this.bTile)\r\n                this.bTile = this.matrix[this.blinky.y - 1][this.blinky.x]\r\n                this.#updateMatrix(this.blinky.y - 1, this.blinky.x, 5)\r\n                this.blinky.y--;\r\n\r\n            }\r\n        }\r\n        if (this.rotationB === 270) { // Ned\r\n            //console.log(\"Ned\")\r\n            if (this.isValidBlinky(0, 1)) {\r\n\r\n                this.#updateMatrix(this.blinky.y, this.blinky.x, this.bTile)\r\n                this.bTile = this.matrix[this.blinky.y + 1][this.blinky.x]\r\n                this.#updateMatrix(this.blinky.y + 1, this.blinky.x, 5)\r\n                this.blinky.y++;\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    movePacman() {\r\n        if (this.rotation === 0) { // Venstre\r\n            if (this.#isValidMove(-1, 0)) {\r\n                this.#updateMatrix(this.pacman.y, this.pacman.x, 0)\r\n                this.#updateMatrix(this.pacman.y, this.pacman.x - 1, 3)\r\n                this.pacman.x--;\r\n            }\r\n        }\r\n        if (this.rotation === 180) { // Høyre\r\n            if (this.#isValidMove(1, 0)) {\r\n                this.#updateMatrix(this.pacman.y, this.pacman.x, 0)\r\n                this.#updateMatrix(this.pacman.y, this.pacman.x + 1, 3)\r\n                this.pacman.x++;\r\n            }\r\n        }\r\n       if (this.rotation === 90) { // Opp\r\n           if (this.#isValidMove(0, -1)) {\r\n               this.#updateMatrix(this.pacman.y, this.pacman.x, 0)\r\n               this.#updateMatrix(this.pacman.y - 1, this.pacman.x, 3)\r\n               this.pacman.y--;\r\n           }\r\n       }\r\n       if (this.rotation === 270) { // Ned\r\n           if (this.#isValidMove(0, 1)) {\r\n               this.#updateMatrix(this.pacman.y, this.pacman.x, 0)\r\n               this.#updateMatrix(this.pacman.y + 1, this.pacman.x, 3)\r\n               this.pacman.y++;\r\n           }\r\n       }\r\n    }\r\n\r\n\r\n    #getCenter(w, h) { // Sentrerer tingen\r\n        return {\r\n            x: window.innerWidth / 2 - w / 2 + \"px\",\r\n            y: window.innerHeight / 2 - h / 2 - 20 + \"px\"\r\n        };\r\n    }\r\n\r\n    #makeCanvas(w, h, color = \"#111\", isTransparent = false) {\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.context = this.#getContext()\r\n        //this.context = this.canvas.getContext(\"2d\");\r\n        this.width = this.canvas.width = w;\r\n        this.height = this.canvas.height = h;\r\n        this.canvas.style.position = \"absolute\";\r\n        this.canvas.style.background = color;\r\n        if (isTransparent) {\r\n            this.canvas.style.backgroundColor = \"transparent\";\r\n        }\r\n        const center = this.#getCenter(w, h);\r\n        this.canvas.style.marginLeft = center.x;\r\n        this.canvas.style.marginTop = center.y;\r\n        document.body.appendChild(this.canvas); //IMPORTANT DO NOT TOUCH\r\n\r\n        return this.context;\r\n    }\r\n\r\n    #getContext() {\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        return this.context;\r\n    }\r\n\r\n    render() { // Render Maze\r\n        const w = (this.cellSize + this.padding) * this.matrix[0].length - (this.padding)\r\n        const h = (this.cellSize + this.padding) * this.matrix.length - (this.padding)\r\n\r\n        this.outlineContext.canvas.width = w;\r\n        this.outlineContext.canvas.height = h;\r\n\r\n        const center = this.#getCenter(w, h); //TODO Finn ut av dette i 17/11\r\n        this.outlineContext.canvas.style.marginTop = center.y;\r\n        this.outlineContext.canvas.style.marginLeft = center.x;\r\n\r\n        for (let row = 0; row < this.matrix.length; row++) {\r\n            for (let col = 0; col < this.matrix[row].length; col++) {\r\n                const cellVal = this.matrix[row][col];\r\n                let color = \"#111\";\r\n\r\n                if (cellVal === 1) {\r\n                    color = \"#4488FF\";\r\n                } else if (cellVal === 2) {\r\n                    color = \"#FFCBFF\";\r\n                }  /*else if (cellVal === 3) {\r\n                    color = this.pacman.color;\r\n                }*/\r\n                this.outlineContext.fillStyle = color;\r\n                this.outlineContext.fillRect(col * (this.cellSize + this.padding),\r\n                    row * (this.cellSize + this.padding),\r\n                    this.cellSize, this.cellSize);\r\n            }\r\n        }\r\n        this.uiContext.font = \"20px Courier\";\r\n        this.uiContext.fillStyle = \"#fff\";\r\n    }\r\n\r\n    loadCoins() {\r\n        this.dotCount = 0;\r\n        const w = (this.cellSize + this.padding) * this.matrix[0].length - (this.padding);\r\n        const h = (this.cellSize + this.padding) * this.matrix.length - (this.padding);\r\n\r\n        this.coinContext.canvas.width = w;\r\n        this.coinContext.canvas.height = h;\r\n\r\n        const center = this.#getCenter(w, h);\r\n        this.coinContext.canvas.style.marginLeft = center.x;\r\n        this.coinContext.canvas.style.marginTop = center.y;\r\n\r\n        for (let row = 0; row < this.matrix.length; row++) {\r\n            for (let col = 0; col < this.matrix[row].length; col++) {\r\n                const cellVal = this.matrix[row][col];\r\n\r\n\r\n                if (cellVal === 4) {\r\n                    this.dotCount++\r\n                    this.coinContext.fillStyle = \"#ecc400\";\r\n                    this.coinContext.fillRect(col * (this.cellSize + this.padding) + 7.5,\r\n                        row * (this.cellSize + this.padding) + 7.5,\r\n                        this.cellSize-15, this.cellSize - 15 );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    loadPosition() { // Renders Pacman and enemies\r\n        const w = (this.cellSize + this.padding) * this.matrix[0].length - (this.padding);\r\n        const h = (this.cellSize + this.padding) * this.matrix.length - (this.padding);\r\n\r\n        this.topContext.canvas.width = w;\r\n        this.topContext.canvas.height = h;\r\n\r\n        const center = this.#getCenter(w, h);\r\n        this.topContext.canvas.style.marginLeft = center.x;\r\n        this.topContext.canvas.style.marginTop = center.y;\r\n\r\n        for (let row = 0; row < this.matrix.length; row++) {\r\n            for (let col = 0; col < this.matrix[row].length; col++) {\r\n                const cellVal = this.matrix[row][col];\r\n\r\n                this.topContext.globalCompositeOperation = 'destination-out';\r\n\r\n                if (cellVal === 3) {\r\n                    this.loadcolor = this.pacman.color;\r\n                    this.topContext.globalCompositeOperation = \"source-over\";\r\n                }\r\n                if (cellVal === 5) {\r\n                    this.topContext.globalCompositeOperation = \"source-over\";\r\n                    this.loadcolor = this.blinky.color;\r\n                }\r\n\r\n                this.topContext.fillStyle = this.loadcolor;\r\n                this.topContext.fillRect(col * (this.cellSize + this.padding),\r\n                    row * (this.cellSize + this.padding),\r\n                    this.cellSize, this.cellSize);\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Setter opp hvordan Matrix gridden skal være\r\nlet gridMatrix = [\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 1, 0, 0, 1, 4, 1, 0, 0, 0, 1, 4, 1, 1, 4, 1, 0, 0, 0, 1, 4, 1, 0, 0, 1, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1],\r\n    [1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1],\r\n    [1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],\r\n    [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n];\r\nlet score = 0 //Setter start score\r\nlet level = 0; //Setter start level\r\n//let time = 100; //Setter start tiden\r\nlet gridSystem;\r\ngridSystem = new GridSystem(gridMatrix,14, 23, 13, 11); //Setter start posisjonen til pacman og lager alt du ser og mer\r\ngridSystem.render();\r\n\r\nfunction sendHighScore() {\r\n    $(\"#p1\").val(name);\r\n    $(\"#p2\").val(highscore);\r\n    $(\"#p3\").val(\"send\");\r\n    $(\"#f1\").submit();\r\n}\r\n\r\n//Updates the highscore\r\nfunction updatehighscore() {\r\n    if (score > highscore) {\r\n        highscore = score;\r\n        localStorage['highscore'] = score\r\n        hschange = 1;\r\n        document.getElementById(\"highscore-output\").innerHTML = score;\r\n    }\r\n    //console.log(highscore)\r\n}\r\n\r\n\r\nfunction gameLoop() { // Tatt fra https://github.com/KristianHelland/worm\r\n    if(gridSystem.matrix[gridSystem.pacman.y][gridSystem.pacman.x] === gridSystem.matrix[gridSystem.blinky.y][gridSystem.blinky.x]) { //Dette skjer når tiden går ut\r\n        //TODO legg til game over screen\r\n        console.log(\"Game over\"); //Logger \"game over\" i console\r\n        console.log(score); //Logger så scoren i console\r\n        gridSystem.uiUpdate(); //Oppdaterer ui en siste gang\r\n        gridSystem.loadCoins(); //Loader inn nye coins en siste gang\r\n        gridSystem.loadPosition(); //Loader posisjon til pacman på nytt en siste gang\r\n        return; //Går ut av gameloopen som betyr at spillet stopper\r\n    }\r\n    if (gridSystem.play) {\r\n        gridSystem.movePacman();\r\n        gridSystem.moveBlinky();\r\n        //time = time - 1;\r\n        //console.log(time)\r\n    }\r\n    if (gridSystem.dotCount === 0) { //Når antall dots i gridden blir lik 0, så blir gridden og pacman resatt, men med litt mindre tid for hver gang, til tiden går ut\r\n        level++; //Øker level med 1\r\n        //time = 100 - level*10; //setter at tiden er 100 minus level gange 10\r\n        gridMatrix.length = 0; //tømmer gridden\r\n\r\n        //Tegner opp gridden på nytt\r\n        gridMatrix = [\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 1, 0, 0, 1, 4, 1, 0, 0, 0, 1, 4, 1, 1, 4, 1, 0, 0, 0, 1, 4, 1, 0, 0, 1, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],\r\n            [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 0, 0, 0, 0, 0],\r\n            [1, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 1],\r\n            [1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1],\r\n            [1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1],\r\n            [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1],\r\n            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n        ];\r\n        gridSystem = new GridSystem(gridMatrix,14, 23, 14, 15); //Plasserer pacman på start posisjon\r\n        gridSystem.render();\r\n        console.log(score); //Skriver ut scoren i consolen\r\n    }\r\n\r\n    //Hvis \"if(time <= 0)\" ikke er sann, så kjøres de neste 4 linjer med kode.\r\n    gridSystem.loadCoins(); //Loader inn nye coins\r\n    gridSystem.loadPosition(); //Loader posisjon til pacman på nytt\r\n    gridSystem.uiUpdate(); //Oppdaterer ui\r\n    setTimeout(gameLoop, 1000/gridSystem.FPS); //'1000 millisekund delt på 5fps'- sekunders pause før gameloop kjøres igjen.\r\n}\r\n//Dette kjøres etter return skjer fra \"if(time <= 0) \"\r\ngameLoop();\r\nconsole.log(gridSystem.dotCount);\r\nconsole.log(score);\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game.js b/game.js
--- a/game.js	(revision 0e0126a9454175dbe71d69e34804223014daf6f8)
+++ b/game.js	(date 1637310862971)
@@ -1,4 +1,3 @@
-//TODO Leg til en fiende
 class GridSystem { //TODO fortsette
     //TODO kommentere - Kristoffer
     constructor(matrix, pacmanX, pacmanY, blinkyX, blinkyY) { //Lager mange lag som ligger oppå hverandre for å vise siden og definerer disse.
@@ -603,5 +602,5 @@
 }
 //Dette kjøres etter return skjer fra "if(time <= 0) "
 gameLoop();
-console.log(gridSystem.dotCount);
-console.log(score);
+//console.log(gridSystem.dotCount);
+//console.log(score);
